<<<<<<< HEAD
#this one cannot work on google cloud functions as it creates a new file in env,which gcf does not allow

backup for test.py
=======

#code from https://www.youtube.com/watch?v=GMppyAPbLYk
>>>>>>> origin/main
from flask import Flask,request,jsonify,redirect
from flask_restful import Api, Resource,reqparse,abort,fields,marshal_with
from flask_sqlalchemy import SQLAlchemy
app = Flask(__name__)
api = Api(app)

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'
db = SQLAlchemy(app)

class VideoModel(db.Model):
    id = db.Column(db.Integer,primary_key = True)
    name = db.Column(db.String(100),nullable=False)#make sure name is not null
    views = db.Column(db.Integer,nullable=False)
    likes = db.Column(db.Integer,nullable=False)
    def __repr__(self):
        return f"Video(name={self.name},views={self.views},likes={self.likes})"
def create_database():
    with app.app_context():
        db.create_all()

video_put_args= reqparse.RequestParser()
video_put_args.add_argument("name",type=str,help="Name of video required",required=True)
video_put_args.add_argument("views",type=int,help="Views of videorequired",required=True)
video_put_args.add_argument("likes",type=int,help="Likes on video required",required=True)


video_update_args = reqparse.RequestParser()
video_update_args.add_argument("name",type=str,help="Name of video required",required=True)
video_update_args.add_argument("views",type=int,help="Views of videorequired",required=True)
video_update_args.add_argument("likes",type=int,help="Likes on video required",required=True)


resorce_fields ={
    'id':fields.Integer,
    'name' :fields.String,
    'views':fields.Integer,
    'likes':fields.Integer,
}

class Video(Resource):
    @marshal_with(resorce_fields)#serialize the returned values  with the resources field dict
    def get(self,video_id):
<<<<<<< HEAD
        result = VideoModel.query.filter_by(id=video_id).first()
=======
        result = VideoModel.query.filter_by(id=video_id)
>>>>>>> origin/main
        if not result:
            abort(404,message="Coukld not find video with that id")
        return result
    @marshal_with(resorce_fields)
    def put(self,video_id):
        args = video_put_args.parse_args()#args is a dictionary that contains the arguments 
        result = VideoModel.query.filter_by(id=video_id).first()
        if result:
            abort(409,message="video id taken")
        video = VideoModel(id=video_id,name=args['name'],views=args['views'],likes=args['likes'])
        db.session.add(video)
        db.session.commit()
        return video,201
    @marshal_with(resorce_fields)
    def patch(self,video_id):
        args = video_update_args.parse_args()
        result = VideoModel.query.filter_by(id=video_id).first()
        if not result:
            abort(404,message="Could not find video with that id")
        if args['name']:
            result.name = args['name']
        if args['views']:
            result.views = args['views']
        if args['likes']:
            result.views = args['likes']
        #db.session.add(result)//dont need to add once added once
        db.session.commit()
    #
    def delete(self, video_id):
        result = VideoModel.query.filter_by(id=video_id).first()
        if not result:
            abort(404, message="Could not find video with that id")
        db.session.delete(result)
        db.session.commit()
        return '', 204  # No content to return, but indicating success with a 204 status code

        
class VideoList(Resource):
    @marshal_with(resorce_fields)
    def get(self):
        videos = VideoModel.query.all()
        if not videos:
            abort(404, message="No videos found")
        return videos

api.add_resource(VideoList, "/videos")
api.add_resource(Video,"/video/<int:video_id>")
@app.route("/")
def index():
    return "Welcome to my Flask API!"
if __name__ =="__main__":
<<<<<<< HEAD
    app.run(debug=True)
=======
    app.run(debug=True)
>>>>>>> origin/main
